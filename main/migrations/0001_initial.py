# Generated by Django 5.1.6 on 2025-03-24 14:24

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ComplaintStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название статуса')),
            ],
            options={
                'verbose_name': 'Статус жалобы',
                'verbose_name_plural': 'Статусы жалоб',
                'db_table': 'ComplaintStatus',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.CharField(max_length=10, unique=True, verbose_name='Номер')),
                ('room_type', models.CharField(choices=[('standard', 'Стандартный'), ('deluxe', 'Делюкс'), ('suite', 'Люкс'), ('presidential', 'Президентский люкс')], max_length=20, verbose_name='Тип номера')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Цена')),
                ('description', models.TextField(verbose_name='Описание')),
                ('image', models.ImageField(blank=True, null=True, upload_to='room_images/', verbose_name='Изображение')),
                ('has_fridge', models.BooleanField(default=False, verbose_name='Холодильник')),
                ('has_minibar', models.BooleanField(default=True, verbose_name='Мини-бар')),
                ('has_bathroom', models.BooleanField(default=True, verbose_name='Ванная комната')),
                ('has_air_conditioning', models.BooleanField(default=True, verbose_name='Кондиционер')),
                ('has_tv', models.BooleanField(default=True, verbose_name='Телевизор')),
                ('has_kettle', models.BooleanField(default=True, verbose_name='Чайник')),
                ('has_wifi', models.BooleanField(default=True, verbose_name='Wi-Fi')),
                ('has_safe', models.BooleanField(default=True, verbose_name='Сейф')),
                ('has_balcony', models.BooleanField(default=False, verbose_name='Балкон')),
                ('has_jacuzzi', models.BooleanField(default=False, verbose_name='Джакузи')),
                ('has_kitchen', models.BooleanField(default=False, verbose_name='Кухня')),
                ('has_office', models.BooleanField(default=False, verbose_name='Офис')),
                ('has_pool', models.BooleanField(default=False, verbose_name='Бассейн')),
                ('has_terrace', models.BooleanField(default=False, verbose_name='Тераса')),
                ('has_sea_view', models.BooleanField(default=False, verbose_name='Вид на море')),
                ('has_city_view', models.BooleanField(default=False, verbose_name='Вид на город')),
                ('has_garden_view', models.BooleanField(default=False, verbose_name='Вид на сад')),
                ('is_available', models.BooleanField(default=True, verbose_name='Доступен')),
            ],
            options={
                'verbose_name': 'Номер',
                'verbose_name_plural': 'Номера',
                'db_table': 'Rooms',
            },
        ),
        migrations.CreateModel(
            name='TaskStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название статуса')),
            ],
            options={
                'verbose_name': 'Статус задачи',
                'verbose_name_plural': 'Статусы задач',
                'db_table': 'TaskStatus',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=12, unique=True, validators=[django.core.validators.RegexValidator(message='Номер телефона должен быть в формате +79001234567', regex='^\\+7\\d{10}$')])),
                ('email', models.EmailField(blank=True, max_length=100, null=True, unique=True, verbose_name='Электронная почта')),
                ('full_name', models.CharField(max_length=100)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='user_photos/')),
                ('registration_date', models.DateField(auto_now_add=True, verbose_name='Дата регистрации')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.role')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in', models.DateField()),
                ('check_out', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='main.room')),
            ],
            options={
                'db_table': 'Bookings',
            },
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст жалобы')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Дата жалобы')),
                ('resolution_date', models.DateField(blank=True, null=True, verbose_name='Дата разрешения')),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.booking', verbose_name='Бронирование')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Разрешил')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.complaintstatus', verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Жалоба',
                'verbose_name_plural': 'Жалобы',
                'db_table': 'Complaint',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('due_date', models.DateTimeField(verbose_name='Срок выполнения')),
                ('status', models.CharField(choices=[('new', 'Новая'), ('in_progress', 'В работе'), ('completed', 'Выполнена'), ('cancelled', 'Отменена')], default='new', max_length=20, verbose_name='Статус')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Выполнено')),
                ('assigned_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL, verbose_name='Назначен')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tasks', to=settings.AUTH_USER_MODEL, verbose_name='Создал')),
            ],
            options={
                'verbose_name': 'Задача',
                'verbose_name_plural': 'Задачи',
                'ordering': ['-created_at'],
            },
        ),
    ]
